"""
Django settings for yieldify project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from dotenv import load_dotenv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
print(BASE_DIR)

for filename in os.listdir(BASE_DIR):
    if filename.endswith('.env'):
        load_dotenv("{}/{}".format(BASE_DIR, filename))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# This should not be here. For production move the secret key somewhere safe!
SECRET_KEY = '=0x4)fbb*ylca0c())*&2(ojpq+z+a0ezriobioz3#4p0og71&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'yieldify.apps.api',
    'django_extensions',
    'rest_framework',
    'rest_framework_docs',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

ROOT_URLCONF = 'yieldify.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'yieldify.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DB_NAME = os.getenv('DB_NAME', 'etl')
DB_USER = os.getenv('DB_USER', 'yieldify')
DB_PASS = os.getenv('DB_PASS', '###')
DB_PORT = os.getenv('DB_PORT', 5432)
print(DB_NAME)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'HOST': 'db',
        'PORT': DB_PORT,
    }
}

# set default renderer for all the views to JSONRenderer
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators
# this was generated automatically by the django start_project command
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
LOG_FOLDER = 'logs'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)-8s %(asctime)s %(filename)s |%(lineno)4d| %(message)s',
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'clear_view': {
            'format': '%(asctime)s %(levelname)9s %(lineno)4s %(module)s %(message)s',
            'datefmt': '%d.%m.%Y-%H:%M:%S'
        },
        'simple': {
            'format': '%(message)s'
        },
    },
    'handlers': {
        'etl': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, LOG_FOLDER, 'etl.log'),
            'formatter': 'verbose',
            'maxBytes': 1024*1024,
            'backupCount': 5,
        },
        'browser': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, LOG_FOLDER, 'browser.log'),
            'formatter': 'verbose',
            'maxBytes': 1024*1024,
            'backupCount': 5,
        },
        'op_sys': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, LOG_FOLDER, 'op_sys.log'),
            'formatter': 'verbose',
            'maxBytes': 1024*1024,
            'backupCount': 5,
        },
        'device': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, LOG_FOLDER, 'device.log'),
            'formatter': 'verbose',
            'maxBytes': 1024*1024,
            'backupCount': 5,
        },
        'base_view': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, LOG_FOLDER, 'base_view.log'),
            'formatter': 'verbose',
            'maxBytes': 1024*1024,
            'backupCount': 5,
        },
        'console': {
            'level': 'DEBUG',
            'formatter': 'simple',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        'etl': {
            'handlers': ['etl'],
            'level': 'DEBUG'
        },
        'browser': {
            'handlers': ['browser'],
            'level': 'DEBUG'
        },
        'op_sys': {
            'handlers': ['op_sys'],
            'level': 'DEBUG'
        },
        'device': {
            'handlers': ['device'],
            'level': 'DEBUG'
        },
        'base_view': {
            'handlers': ['base_view'],
            'level': 'DEBUG'
        },
    },
}

CHUNK_SIZE = 1024